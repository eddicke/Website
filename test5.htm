<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Using babylon.js - How to load a scene</title>
          <script src="hand.minified-1.2.js"></script>
        <script src="cannon.js"></script>
        <script src="oimo.js"></script>
        <script src="babylon.js"></script>
    <style>
        html, body {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            overflow: hidden;
        }

          #renderCanvas {
                width: 100%;
                height: 100%;
               
            }
#ammoLabel { 
position:absolute;
 top:20px; 
left : 20px; 
color:green; 
font-size: 2em; 
} 
#cool { 
position: fixed;
 top:20px; 
right : 30px; 
color:green; 
font-size: 2em; 
} 
#cool {
    border-radius: 15px 50px 30px;
    background: #73AD21;
    padding: 20px; 
    width: 200px;
    height: 150px; 
}

    </style>
</head>
<body>
<div id="ammoLabel"></div>
    <canvas id="renderCanvas"></canvas>
<button id = "cool"></button>
 </body>
</html>


<script>
    if (BABYLON.Engine.isSupported()) {
        var canvas = document.getElementById("renderCanvas");
        var engine = new BABYLON.Engine(canvas, true);
engine.displayLoadingUI(); 

engine.loadingUIText = "wait";
engine.loadingUIBackgroundColor = "blue";
	     

var trick =engine.setHardwareScalingLevel(1.5);
//score

BABYLON.SceneLoader.ShowLoadingScreen = true;


        BABYLON.SceneLoader.Load("Scenes/Sponza/", "Sponza.babylon", engine, function (newScene) {

//game sound
var music = new BABYLON.Sound("Violons", "sound.mp3", newScene, null, { loop: true, autoplay: true });
	//*
            // Wait for textures and shaders to be ready
            newScene.executeWhenReady(function () {
      newScene.debugLayer.show(true);

  // This creates and positions a free camera (non-mesh)
             //var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), newScene);

    // This targets the camera to scene origin
    //camera.setTarget(BABYLON.Vector3.Zero());



newScene.onPointerDown = function(){
    alert(newScene.activeCamera);
}


    // This attaches the camera to the canvas
    //camera.attachControl(canvas, true);
var enemy = BABYLON.Mesh.CreateSphere("skybox",10, 0.5, newScene);

  var enemyMaterial = new BABYLON.StandardMaterial("enemy", newScene);
         enemyMaterial.diffuseTexture = new BABYLON.Texture("textures/emoticon.png", newScene);
enemyMaterial.diffuseTexture.vOffset = 0.1;//Vertical offset of 10%
    enemyMaterial.diffuseTexture.uOffset = 0.4;//Horizontal offset of 40%
enemy.isPickable = true;
enemy.rotation.y = 3/2 * Math.PI;
enemy.showBoundingBox = false;
 	enemy.material = enemyMaterial;
enemy.position.x = Math.random() * 15 - 5;
enemy.position.z = Math.random() * 15 - 5;
//enemy2
var enemy2 = BABYLON.Mesh.CreateSphere("skybox",10, 0.5, newScene, true);

  var enemy2Material = new BABYLON.StandardMaterial("enemy", newScene);
         enemy2Material.diffuseTexture = new BABYLON.Texture("emoticon.png", newScene);
enemy2Material.diffuseTexture.vOffset = 0.1;//Vertical offset of 10%
    enemy2Material.diffuseTexture.uOffset = 0.4;//Horizontal offset of 40%
enemy2.isPickable = true;
enemy2.rotation.y = 3/2 * Math.PI;
enemy2.showBoundingBox = false;
 	enemy2.material = enemy2Material;
enemy2.position.x = Math.random() * 10 - 5;
enemy2.position.z = Math.random() * 10 - 5;
//
newScene.activeCamera.attachControl(canvas, true);
///////////////////////the weapon/////////////////
	var skeleton;
	var dude = BABYLON.SceneLoader.ImportMesh("Body", "", "mp5k.babylon", newScene, function (newMeshes, particleSystems, skeletons) {
	    dude = newMeshes[0];
		skeleton = skeletons[0];
	//	console.log(skeleton.bones)
	   // dude.rotation.y = 2 * Math.PI;
		dude.scaling = new BABYLON.Vector3(0.015,0.015,0.015);
var armor = BABYLON.Mesh.CreateBox("armor", 20, newScene);
dude.isPickable = true;
armor.parent = dude;
	var bullet = BABYLON.Mesh.CreateSphere('bullet', 10, 0.3, newScene);
    bullet.parent = armor;
bullet.position = armor.position.clone();
newScene.onPointerDown = function(){
newScene.registerBeforeRender(function() {
bullet.position.z += 0.05;

});
};
var halfSize = 7.5;
//here
newScene.registerBeforeRender(function() {
		var pickResult = newScene.pick(newScene.pointerX / 1.8, newScene.pointerY / 1.2,
                    function(mesh) { return mesh === enemy},
                    false,
                    newScene.activeCamera);
					
        if (pickResult.hit) {


   
          pickResult.pickedMesh.dispose();
//impact.position.y = pickResult.pickedPoint.y;
//impact.position.x = pickResult.pickedPoint.x;
//impact.position.z = pickResult.pickedPoint.z;
        }
	});


    armor.setBoundingInfo(new BABYLON.BoundingInfo(new BABYLON.Vector3(-halfSize, -halfSize, -halfSize), new BABYLON.Vector3(halfSize, halfSize, halfSize)));
    armor.showBoundingBox = false;

armor.isPickable = true;


 




armor.visibility = 0;
armor.position.z = dude.position.z - 10;
dude.position = new BABYLON.Vector3(0,0,3);


//*




var set = setInterval(myScore, 1000);
var score = 5;
function myScore() {
var so = document.getElementById("cool");
so.style.color = "gold";
    document.getElementById("cool").innerHTML = "score    "+score;

if(enemy.intersectsMesh(armor)){
//enemy.dispose();
//dude.dispose();
score--;
}
if(score === 0){
var over = document.getElementById("ammoLabel");
over.style.color = "red";
//over.style.fontSize = "150px";
over.style.top = "140px";
//over.innerHTML = "Game Over!"
enemy.freezeWorldMatrix();
};
var fire;
var observe;
 newScene.registerBeforeRender(function() {
		var pickResult = newScene.pick(newScene.pointerX / 1.8, newScene.pointerY / 1.2,
                    function(mesh) { return mesh === enemy2},
                    false,
                    newScene.activeCamera);
			observe = newScene.onBeforeRenderObservable.add(function(){		
        if (pickResult.hit) {
//alert('fine');

   
           pickResult.pickedMesh.visibility = 0;

        }
});
if(score < 3){
//newScene.onBeforeRenderObservable.clear(obbserver);
var over = document.getElementById("ammoLabel");
over.innerHTML ="you need some ammo!.."
pickResult.hit = false;
}
	});
}

 



dude.parent = newScene.activeCamera;

//newScene.activeCamera.lockedTarget = dude;
newScene.registerBeforeRender(function(){
enemy.lookAt(dude.absolutePosition);
enemy.locallyTranslate(new BABYLON.Vector3(0, 0, -0.05));

if(enemy.intersectsMesh(armor)){
//skybox.dispose();
//dude.dispose();

}
});

newScene.registerBeforeRender(function(){
enemy2.lookAt(dude.absolutePosition);
enemy2.locallyTranslate(new BABYLON.Vector3(0, 0, -0.05));

if(enemy.intersectsMesh(armor)){
//skybox.dispose();
//dude.dispose();

}
});
//movement
        document.addEventListener('touchstart', handleTouchStart, false);        
        document.addEventListener('touchmove', handleTouchMove, false);
        
        var xDown = null;                                                        
        var yDown = null;                                                        
        
        function handleTouchStart(evt) {                                         
            xDown = evt.touches[0].clientX;                                      
            yDown = evt.touches[0].clientY;                                      
        };                                                
        
        function handleTouchMove(evt) {
            if ( ! xDown || ! yDown ) {
                return;
            }
        
            var xUp = evt.touches[0].clientX;                                    
            var yUp = evt.touches[0].clientY;
        
            var xDiff = xDown - xUp;
            var yDiff = yDown - yUp;
        
            if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/
                if ( xDiff > 0 ) {
                   //eastward movement
                    var moveleft = 0.02
                      newScene.registerBeforeRender(function(){
//dude.rotation.y =  Math.PI / 2;
                //dude.position.x -= moveleft;

                    });
                    
                
                    newScene.onPointerUp = function(){

                    moveleft = 0;
                    }

newScene.onPointerDown = function(){

                    moveleft = 0;
                    
                }                       

                } else {
//eastward movement
                   
                    var moveright = 0.02
                      
                      newScene.registerBeforeRender(function(){
//dude.rotation.y =  3/2 * Math.PI;
               // dude.position.x += moveright;


                    });
                    
                
                    newScene.onPointerUp = function(){

                    moveright = 0;
 
                    }

newScene.onPointerDown = function(){

                    moveright = 0;
 
                    }

                }                       
            } else {
                if ( yDiff > 0 ) {
//upward movement
                var moveup = 0.02;
                        var go = newScene.registerBeforeRender(function goN(){
//dude.rotation.y = Math.PI;
                //dude.position.z += moveup;
                    });
                    

  
      
                    newScene.onPointerUp = function(){
                    moveup = 0;

                    }
newScene.onPointerDown = function(){

                    moveup = 0;


                    }


                } else { 


                    //upward movement
                var movedown = 0.02;
                        var go = newScene.registerBeforeRender(function goN(){
//dude.rotation.y = 2 * Math.PI;
                //dude.position.z -= movedown;
                    });
                    

         
                    newScene.onPointerUp = function(){
                    movedown = 0;

                    }
newScene.onPointerDown = function(){
                    movedown= 0;
                 }
                }                                                                 
            }
       /* reset values */
            xDown = null;
            yDown = null;                                             
        };
});
                // Attach camera to canvas inputs
   
                // Once the scene is loaded, just register a render loop to render it
                engine.runRenderLoop(function() {
                    newScene.render();
                });
            });
        }, function (progress) {
            // To do: give progress feedback to user
        });

    }
</script>
 </body>
</html>
